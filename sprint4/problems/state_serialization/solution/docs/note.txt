
curl -X POST -H "Content-Type: application/json" -d '{"userName": "Scooby Doo", "mapId": "map1"}' http://127.0.0.1:8080/api/v1/game/join
curl -X GET  -H "Authorization: Bearer bd0d1f0d838308f35773dc54968a1bc0" "http://127.0.0.1:8080/api/v1/game/players"
curl -X GET  -H "Authorization: Bearer bd0d1f0d838308f35773dc54968a1bc0" "http://127.0.0.1:8080/api/v1/game/state"
curl -X POST -H "Content-Type: application/json" -d '{"timeDelta":100}' http://127.0.0.1:8080/
------------------------------------------------------------------------------------------------------------------------
game_server --tick-period <time-in-ms> --config-file <config-path> --www-root <static-files-dir>
------------------------------------
conan install .. --build=missing -s build_type=Release -s compiler.libcxx=libstdc++11
cmake ..
cmake --build .
mkdir build_debug && cd build_debug
conan install .. -s compiler.libcxx=libstdc++11 -s build_type=Debug
cmake .. -DCMAKE_BUILD_TYPE=Debug
cmake --build . 
------------------------------------------------------------
Добавьте в игровой сервер возможность сохранять игровое состояние в файл и восстановливать состояние из файла при старте.
Добавьте следующие параметры командной строки:

    Параметр --state-file <путь-к-файлу> задаёт путь к файлу, в который приложение должно сохранять своё состояние в процессе работы, 
    а при старте — восстанавливать. Если параметр не задан, игровой сервер всегда запускается с чистого листа и не сохраняет своё состояние в файл. 
    Когда параметр задан и сервер завершает работу, получив сигналы SIGINT и SIGTERM, программа должна сохранить на диск своё текущее состояние.
    Параметр --save-state-period <игровое-время-в-миллисекундах>. 
    Задаёт период автоматического сохранения состояния сервера. 
    Сохранение должно происходить синхронно с ходом игровых часов, если с момента предыдущего сохранения состояния прошло не меньше указанного времени. 
    Если параметр не задан, состояние должно сохраняться автоматически только перед завершением работы сервера, когда ему отправлены сигналы SIGINT и SIGTERM. 
    Этот параметр игнорируется, если запустить сервер без параметра --state-file.

Когда в командной строке сервера указан параметр --state-file и по указанному пути есть файл, сервер должен восстановить своё состояние из этого файла. 
Если при восстановлении состояния возникла ошибка, например, в файле есть некорректные данные, сервер должен:

    в log вывести сообщение об ошибке;
    завершить работу и вернуть из функции код ошибки EXIT_FAILURE.

Если файл, путь к которому задан в --state-file, на диске не существует, сервер должен начать работу с чистого листа.
Сервер должен использовать игровое время для определения моментов автоматического сохранения состояния. 
То есть сохранение должно происходить в те моменты, когда происходит обновление игровых часов по HTTP-запросу /api/v1/game/tick либо автоматически, 
если сервер был запущен с параметром командой строки --tick-period.
Состояние, которое сохраняется на диск, должно включать:

    информацию обо всех динамических объектах на всех картах — собаках и потерянных предметах;
    информацию о токенах и идентификаторах пользователей, вошедших в игру.

--------------------------------------------------
Используйте std::filesystem::rename для атомарного переименования временного файла в целевой.
Ваш сервер уже умеет корректно завершаться при получении сигналов SIGINT и SIGTERM. 
После выхода из функции RunWorkers асинхронные операции не выполняются, и можно сохранить состояние игры перед выходом из программы.
---
int main() {
    ...
    try {
        ...
        net::io_context ioc(num_threads);

        // Подписываемся на сигналы и при их получении завершаем работу сервера
        net::signal_set signals(ioc, SIGINT, SIGTERM);
        signals.async_wait([&ioc](const sys::error_code& ec, [[maybe_unused]] int signal_number) {
            if (!ec) {
                ioc.stop();
            }
        });
        ...
        RunWorkers(std::max(1u, num_threads), [&ioc] {
            ioc.run();
        });
        // В этой точке все асинхронные операции уже завершены и можно 
        // сохранить состояние сервера в файл
        // <-----------------------------------
    } catch (...) {
        ...
    }
} 


           ar &*id_;
            ar &speed_;
                ar &pos_;
                ar &previous_pos_;
                ar &dir_;
                ar &
                ar &
                ar &
                ar &
                ar &