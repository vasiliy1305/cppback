
curl -X POST -H "Content-Type: application/json" -d '{"userName": "Scooby Doo", "mapId": "map1"}' http://127.0.0.1:8080/api/v1/game/join
curl -X GET  -H "Authorization: Bearer bd0d1f0d838308f35773dc54968a1bc0" "http://127.0.0.1:8080/api/v1/game/players"
curl -X GET  -H "Authorization: Bearer bd0d1f0d838308f35773dc54968a1bc0" "http://127.0.0.1:8080/api/v1/game/state"
curl -X POST -H "Content-Type: application/json" -d '{"timeDelta":100}' http://127.0.0.1:8080/
------------------------------------------------------------------------------------------------------------------------
game_server --tick-period <time-in-ms> --config-file <config-path> --www-root <static-files-dir>
------------------------------------
conan install .. --build=missing -s build_type=Release -s compiler.libcxx=libstdc++11
cmake ..
cmake --build .
mkdir build_debug && cd build_debug
conan install .. -s compiler.libcxx=libstdc++11 -s build_type=Debug
cmake .. -DCMAKE_BUILD_TYPE=Debug
cmake --build . 
------------------------------------------------------------
postgresql://postgres:@localhost:5432/game_db

GAME_DB_URL
---------------------------------------------------------------
    Задание
Это задание — заключительное в вашей дипломной работе. Готовую программу надо будет сдать на ревью.
Всё хорошее когда-нибудь заканчивается. Вот и в вашей игре собаки, которые устали собирать потерянные вещи, могут перестать это делать. 
Если игрок, управляющий собакой, какое-то время не проявляет активность, его собака высвобождается от работы и отправляется на покой. 
Токен бездействующего игрока аннулируется, сервер его не принимает. Трудовые заслуги пса записываются в таблицу рекордов:

    имя пса;
    набранные очки;
    время, которое пёс провёл в игре с момента входа в игру до момента выхода на заслуженный отдых.

Время бездействия пса — непрерывный промежуток времени, в течение которого скорость пса была равна нулю. 
Например, если при допустимом времени бездействия, равном 1 минуте, в момент времени t0=0:00t0​=0:00 пёс начал двигаться и остановился в момент времени t1=5:25t1​=5:25,
 то в момент времени t2=6:25t2​=6:25 пёс уйдёт на покой, если не начнёт двигаться. 
Бездействие пса начинается в тот момент, когда его скорость становится равной нулю, то есть при наступлении любого из следующих условий:

    Пёс получил команду {"move": ""}
    Пёс остановился, упёршись в край дороги

Время бездействия по умолчанию равно одной минуте. 
Чтобы переопределить это значение, нужно указать его в конфигурационном JSON-файле в свойстве dogRetirementTime, которое задаёт время в секундах.

{
  "defaultDogSpeed": 3.0,
  "lootGeneratorConfig": {
    "period": 5.0,
    "probability": 0.5
  },
  "dogRetirementTime": 10.0,
  "maps": [ ... ]
}


Для получения списка рекордсменов сервер должен предоставить отдельную точку входа /api/v1/game/records.
Ответ на GET-запрос к этой точке входа должен иметь свойства:

    статус-код 200 OK,
    заголовок Content-Type: application/json,
    заголовок Cache-Control: no-cache,
    заголовок Content-Length: <размер тела ответа>.

В теле ответа массив объектов, со свойствами:

    name — строка, задающая кличку собаки,
    score — число, задающее число,
    playTime — время в секундах, которое игрок провёл в игре с момента входа до момента выхода из игры.

Время, которое игрок провёл в игре, включает в себя время бездействия, прошедшее с момента последней остановки.
 Например, если игрок вошёл в игру в tjoin=0:15tjoin​=0:15, перестал двигаться в tstop=1:20tstop​=1:20 и был исключён из игры в tretire=1:50tretire​=1:50, 
 то величина playTime должна быть равна tretire−tstart=1:35tretire​−tstart​=1:35 или 95 секундам.
Элементы массива должны быть отсортированы в порядке уменьшения баллов. Элементы с одинаковыми баллами должны быть отсортированы в порядке увеличения игрового времени.
 Элементы с одинаковыми баллами и игровым временем отсортированы по имени (в порядке возрастания).
Пример ответа:

HTTP/1.1 200 OK
Content-Type: application/json
Cache-Control: no-cache
Content-Length: 218

[
  {"name":"Ressy", "score":1000, "playTime": 32.5},
  {"name":"Goofy", "score":1000, "playTime": 35.243},
  {"name":"Pluto", "score":740, "playTime": 35.243},
  {"name":"Rex", "score":740, "playTime": 35.243}
]

Так как со временем количество записей в таблице рекордов будет увеличиваться, массив должен по умолчанию содержать не более 100 элементов. 
Количество элементов и индекс стартового элемента задаются опциональными параметрами, передаваемыми в URL-строке запроса:

    start — целое число, задающее номер начального элемента (0 — начальный элемент).
    maxItems — целое число, задающее максимальное количество элементов. Если maxItems превышает 100, должна вернуться ошибка с кодом 400 Bad Request.

Таблица рекордов должна храниться в базе данных PostgreSQL. URL базы данных программе передаётся через переменную окружения GAME_DB_URL.
При старте программы проверьте наличие таблицы retired_players (ушедшие на пенсию игроки). Если её нет, создайте эту таблицу с нужной структурой. 
Задайте необходимые индексы для полей таблицы, обеспечивающие быструю сортировку.
Как будет тестироваться ваш код
Автоматические тесты проверят работу программы как с пустой базой данных, так и с базой данных, содержащей таблицу рекордов после предыдущих запусков. 
Используя API для управления игровым временем, тесты проверят сценарии выхода из игры из-за неактивности.  
Рекомендации
Экземпляры класса pqxx::connection, а также использующие их объекты, такие как транзакции, не рассчитаны на конкурентный доступ  из нескольких потоков. 
В процессе работы с БД вам нужно будет либо создавать каждый раз новое соединение, либо реализовать пул соединений.
Если в процессе разработки вам будет нужно, чтобы при событии, произошедшем внутри одного объекта, на событие отреагировал другой объект или объекты, и вы не хотите, 
чтобы первый объект что-либо знал про второй, вам может пригодиться паттерн проектирования «Наблюдатель» (Observer). 
Полезной может оказаться также библиотека [Boost.Signls2], реализующая паттерн «Наблюдатель» в функциональном стиле.
