
curl -X POST -H "Content-Type: application/json" -d '{"userName": "Scooby Doo", "mapId": "map1"}' http://127.0.0.1:8080/api/v1/game/join
curl -X GET  -H "Authorization: Bearer bd0d1f0d838308f35773dc54968a1bc0" "http://127.0.0.1:8080/api/v1/game/players"
curl -X GET  -H "Authorization: Bearer bd0d1f0d838308f35773dc54968a1bc0" "http://127.0.0.1:8080/api/v1/game/state"
curl -X POST -H "Content-Type: application/json" -d '{"timeDelta":100}' http://127.0.0.1:8080/

------------------------------------------------------------------------------------------------------------------------

game_server --tick-period <time-in-ms> --config-file <config-path> --www-root <static-files-dir>

------------------------------------
conan install .. --build=missing -s build_type=Release -s compiler.libcxx=libstdc++11
cmake ..
cmake --build .


mkdir build_debug && cd build_debug

conan install .. -s compiler.libcxx=libstdc++11 -s build_type=Debug
cmake .. -DCMAKE_BUILD_TYPE=Debug
cmake --build . 
------------------------------------------------

В конфигурационный файл добавляются два новых свойства:

    Вместимость рюкзаков на всех картах задаёт опциональное поле defaultBagCapacity в корневом JSON-объекте. Если это поле отсутствует, вместимость по умолчанию считается равной 3.
    Вместимость рюкзаков на конкретной карте задаёт опциональное поле bagCapacity в соответствующем объекте карты. Если это поле отсутствует, на карте используется вместимость по умолчанию.

Пример конфигурационного файла:

{
  "defaultBagCapacity": 3,
  "maps": [
    {
      "id": "map1", "name": "Map 1",
      ...
    },
    {
      "id": "map2", "name": "Map 2",
      "bagCapacity": 5,
      ...
    }
  ]
}

-----------------------------------------------------------------------

Изменение в протоколе взаимодействия с клиентом
В ответе на запрос к /api/v1/game/state теперь нужно отдавать содержимое рюкзака игроков. Для этого в информацию об игроке добавьте поле bag. Его тип — массив, содержащий информацию о собранных предметах. Информация задаётся в виде объекта со следующими полями:

    id (целое число) — идентификатор предмета. Совпадает с тем идентификатором, который имел предмет до того, как его нашли.
    type (целое число) — тип предмета. Тип также не должен меняться при подборе.

Следует передавать предметы в том порядке, в котором они были собраны. Вот пример ответа сервера:

{
   "players":{
      "13":{
         "pos":[10.5,3.8],
         "speed":[0.5, 0],
         "dir":"L",
         "bag":[
            {"id":9, "type":4},
            {"id":8, "type":4}
         ]
      }
   },
   "lostObjects":{
      "11":{
         "type":3,
         "pos":[13.2,17.2]
      }
   }
}

------------------------------------------------------------


Игроки имеют рюкзак, вместимость которого указывается в конфигурационном файле. Игрок берёт все предметы, мимо которых он проходит, если рюкзак не полон. Игрок пропускает предмет, если рюкзак полон. Проходя мимо базы, игрок убирает все предметы из рюкзака.
Обрабатывать коллизии нужно в хронологическом порядке. При этом учтите, что за время одного тика даже с одним игроком может произойти несколько событий. Например игрок может:

    Взять предмет.
    Пропустить другой предмет, потому что рюкзак полон.
    Сдать все предметы на базу.
    Взять новый предмет.

Если два или более игрока с незаполненными рюкзаками проходят мимо одного предмета, 
то его берёт тот игрок, который достиг предмет ранее.

Ширина объектов игры такая:

    Предметы — ширина ноль,
    Игроки — ширина 0,6,
    Базы — ширина 0,5.

Таким образом, половина игрока находится вне дороги при движении по её краю. Так как ширина дороги 0,4, игрок в этом случае не соберёт предмет, лежащий в центре дороги, но может вернуть предметы на базу. Учтите, для проверки коллизии нужно использовать половину ширины объектов. Например, игрок соберёт предмет, находящийся от него на расстоянии 0,3 или меньше. Предметы вернутся на базу, если до неё от игрока не более 0,55 единиц расстояния: 0,5 / 2 + 0,6 / 2.
Если два события происходят одновременно, порядок их выполнения не определён.